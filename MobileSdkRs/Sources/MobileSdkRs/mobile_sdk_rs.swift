// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(mobile_sdk_rsFFI)
import mobile_sdk_rsFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_mobile_sdk_rs_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_mobile_sdk_rs_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




/**
 * An individual credential.
 */
public protocol CredentialProtocol : AnyObject {
    
    /**
     * Get the type of the credential.
     */
    func ctype()  -> CredentialType
    
    /**
     * Get the format of the credential.
     */
    func format()  -> ClaimFormatDesignation
    
    /**
     * Get the ID of the credential.
     */
    func id()  -> Uuid
    
    /**
     * Get the payload of the credential.
     */
    func payload()  -> Data
    
}

/**
 * An individual credential.
 */
open class Credential:
    CredentialProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mobile_sdk_rs_fn_clone_credential(self.pointer, $0) }
    }
    /**
     * Create a new credential.
     */
public convenience init(id: Uuid, format: ClaimFormatDesignation, ctype: CredentialType, payload: Data) {
    let pointer =
        try! rustCall() {
    uniffi_mobile_sdk_rs_fn_constructor_credential_new(
        FfiConverterTypeUuid.lower(id),
        FfiConverterTypeClaimFormatDesignation.lower(format),
        FfiConverterTypeCredentialType.lower(ctype),
        FfiConverterData.lower(payload),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mobile_sdk_rs_fn_free_credential(pointer, $0) }
    }

    
public static func newAsArc(id: Uuid, format: ClaimFormatDesignation, ctype: CredentialType, payload: Data) -> Credential {
    return try!  FfiConverterTypeCredential.lift(try! rustCall() {
    uniffi_mobile_sdk_rs_fn_constructor_credential_new_as_arc(
        FfiConverterTypeUuid.lower(id),
        FfiConverterTypeClaimFormatDesignation.lower(format),
        FfiConverterTypeCredentialType.lower(ctype),
        FfiConverterData.lower(payload),$0
    )
})
}
    

    
    /**
     * Get the type of the credential.
     */
open func ctype() -> CredentialType {
    return try!  FfiConverterTypeCredentialType.lift(try! rustCall() {
    uniffi_mobile_sdk_rs_fn_method_credential_ctype(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the format of the credential.
     */
open func format() -> ClaimFormatDesignation {
    return try!  FfiConverterTypeClaimFormatDesignation.lift(try! rustCall() {
    uniffi_mobile_sdk_rs_fn_method_credential_format(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the ID of the credential.
     */
open func id() -> Uuid {
    return try!  FfiConverterTypeUuid.lift(try! rustCall() {
    uniffi_mobile_sdk_rs_fn_method_credential_id(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the payload of the credential.
     */
open func payload() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_mobile_sdk_rs_fn_method_credential_payload(self.uniffiClonePointer(),$0
    )
})
}
    

}

public struct FfiConverterTypeCredential: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Credential

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Credential {
        return Credential(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Credential) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Credential {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Credential, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeCredential_lift(_ pointer: UnsafeMutableRawPointer) throws -> Credential {
    return try FfiConverterTypeCredential.lift(pointer)
}

public func FfiConverterTypeCredential_lower(_ value: Credential) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCredential.lower(value)
}




/**
 * EncryptedPayload is a struct that holds the IV and ciphertext
 * of an encrypted payload.
 */
public protocol EncryptedPayloadProtocol : AnyObject {
    
    /**
     * Get the ciphertext for the encrypted payload.
     */
    func ciphertext()  -> Data
    
    /**
     * Get the initialization vector (IV) for the encrypted payload.
     */
    func iv()  -> Data
    
}

/**
 * EncryptedPayload is a struct that holds the IV and ciphertext
 * of an encrypted payload.
 */
open class EncryptedPayload:
    EncryptedPayloadProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mobile_sdk_rs_fn_clone_encryptedpayload(self.pointer, $0) }
    }
public convenience init(iv: Data, ciphertext: Data) {
    let pointer =
        try! rustCall() {
    uniffi_mobile_sdk_rs_fn_constructor_encryptedpayload_new(
        FfiConverterData.lower(iv),
        FfiConverterData.lower(ciphertext),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mobile_sdk_rs_fn_free_encryptedpayload(pointer, $0) }
    }

    

    
    /**
     * Get the ciphertext for the encrypted payload.
     */
open func ciphertext() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_mobile_sdk_rs_fn_method_encryptedpayload_ciphertext(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Get the initialization vector (IV) for the encrypted payload.
     */
open func iv() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_mobile_sdk_rs_fn_method_encryptedpayload_iv(self.uniffiClonePointer(),$0
    )
})
}
    

}

public struct FfiConverterTypeEncryptedPayload: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EncryptedPayload

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EncryptedPayload {
        return EncryptedPayload(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EncryptedPayload) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EncryptedPayload {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EncryptedPayload, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeEncryptedPayload_lift(_ pointer: UnsafeMutableRawPointer) throws -> EncryptedPayload {
    return try FfiConverterTypeEncryptedPayload.lift(pointer)
}

public func FfiConverterTypeEncryptedPayload_lower(_ value: EncryptedPayload) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEncryptedPayload.lower(value)
}




public protocol MDocProtocol : AnyObject {
    
    func id()  -> Uuid
    
}

open class MDoc:
    MDocProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mobile_sdk_rs_fn_clone_mdoc(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mobile_sdk_rs_fn_free_mdoc(pointer, $0) }
    }

    
public static func fromCbor(value: Data) -> MDoc {
    return try!  FfiConverterTypeMDoc.lift(try! rustCall() {
    uniffi_mobile_sdk_rs_fn_constructor_mdoc_from_cbor(
        FfiConverterData.lower(value),$0
    )
})
}
    

    
open func id() -> Uuid {
    return try!  FfiConverterTypeUuid.lift(try! rustCall() {
    uniffi_mobile_sdk_rs_fn_method_mdoc_id(self.uniffiClonePointer(),$0
    )
})
}
    

}

public struct FfiConverterTypeMDoc: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = MDoc

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> MDoc {
        return MDoc(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: MDoc) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MDoc {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: MDoc, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeMDoc_lift(_ pointer: UnsafeMutableRawPointer) throws -> MDoc {
    return try FfiConverterTypeMDoc.lift(pointer)
}

public func FfiConverterTypeMDoc_lower(_ value: MDoc) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMDoc.lower(value)
}




public protocol SessionManagerProtocol : AnyObject {
    
}

open class SessionManager:
    SessionManagerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mobile_sdk_rs_fn_clone_sessionmanager(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mobile_sdk_rs_fn_free_sessionmanager(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeSessionManager: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SessionManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SessionManager {
        return SessionManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SessionManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SessionManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeSessionManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> SessionManager {
    return try FfiConverterTypeSessionManager.lift(pointer)
}

public func FfiConverterTypeSessionManager_lower(_ value: SessionManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSessionManager.lower(value)
}




public protocol SessionManagerEngagedProtocol : AnyObject {
    
}

open class SessionManagerEngaged:
    SessionManagerEngagedProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mobile_sdk_rs_fn_clone_sessionmanagerengaged(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mobile_sdk_rs_fn_free_sessionmanagerengaged(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeSessionManagerEngaged: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SessionManagerEngaged

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SessionManagerEngaged {
        return SessionManagerEngaged(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SessionManagerEngaged) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionManagerEngaged {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SessionManagerEngaged, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeSessionManagerEngaged_lift(_ pointer: UnsafeMutableRawPointer) throws -> SessionManagerEngaged {
    return try FfiConverterTypeSessionManagerEngaged.lift(pointer)
}

public func FfiConverterTypeSessionManagerEngaged_lower(_ value: SessionManagerEngaged) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSessionManagerEngaged.lower(value)
}




/**
 * The [Wallet](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#section-2-3.32) is used by the
 * Holder to receive, store, present, and manage
 * [Verifiable Credentials](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#section-2-3.4) and key material.
 * There is no single deployment model of a Wallet:
 * [Verifiable Credentials](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#section-2-3.4) and keys can
 * both be stored/managed locally, or by using a remote self-hosted service, or a remote third-party service.
 *
 * In the context of the [OID4VP](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html) specification,
 * the Wallet acts as an OAuth 2.0 Authorization Server
 * (see [RFC6749](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#RFC6749))
 * towards the Credential Verifier which acts as the OAuth 2.0 Client.

 */
public protocol WalletProtocol : AnyObject {
    
    /**
     * Add a credential to the wallet.
     *
     * This method will add a verifiable credential to the wallet.
     */
    func addCredential(credential: Credential) throws 
    
    /**
     * Handle an OID4VP authorization request provided as a URL.
     *
     * This method will validate and process the request, returning a
     * redirect URL with the encoded verifiable presentation token,
     * if the presentation exchange was successful.
     *
     * If the request is invalid or cannot be processed, an error will be returned.
     *
     * # Arguments
     *
     * * `url` - The URL containing the OID4VP authorization request.
     *
     * # Returns
     *
     * An optional URL containing the OID4VP response.
     *
     * # Errors
     *
     * * If the request is invalid;
     * * If the response mode is not supported;
     * * If the response submission fails.

     */
    func handleOid4vpRequest(url: Url, callback: CredentialCallbackInterface) async throws  -> Url?
    
}

/**
 * The [Wallet](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#section-2-3.32) is used by the
 * Holder to receive, store, present, and manage
 * [Verifiable Credentials](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#section-2-3.4) and key material.
 * There is no single deployment model of a Wallet:
 * [Verifiable Credentials](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#section-2-3.4) and keys can
 * both be stored/managed locally, or by using a remote self-hosted service, or a remote third-party service.
 *
 * In the context of the [OID4VP](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html) specification,
 * the Wallet acts as an OAuth 2.0 Authorization Server
 * (see [RFC6749](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#RFC6749))
 * towards the Credential Verifier which acts as the OAuth 2.0 Client.

 */
open class Wallet:
    WalletProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_mobile_sdk_rs_fn_clone_wallet(self.pointer, $0) }
    }
    /**
     * Initialize a new [Wallet] instance provides a storage manager and key manager.
     *
     * The storage and key managers are foreign callback interfaces that are implemented
     * in the native language of the foreign environment, e.g. Kotlin, Swift, etc.
     *
     * # Arguments
     *
     * * `storage_manager` - A foreign callback interface that implements the [StorageManagerInterface].
     *
     * * `key_manager` - A foreign callback interface that implements the [KeyManagerInterface].
     *
     * # Returns
     *
     * A new [Wallet] instance.
     *
     * # Errors
     *
     * * If the HTTP client fails to initialize;
     * * If there is a storage error when initializing the metadata manager.
     */
public convenience init(storageManager: StorageManagerInterface, keyManager: KeyManagerInterface)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeWalletError.lift) {
    uniffi_mobile_sdk_rs_fn_constructor_wallet_new(
        FfiConverterCallbackInterfaceStorageManagerInterface.lower(storageManager),
        FfiConverterCallbackInterfaceKeyManagerInterface.lower(keyManager),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_mobile_sdk_rs_fn_free_wallet(pointer, $0) }
    }

    

    
    /**
     * Add a credential to the wallet.
     *
     * This method will add a verifiable credential to the wallet.
     */
open func addCredential(credential: Credential)throws  {try rustCallWithError(FfiConverterTypeWalletError.lift) {
    uniffi_mobile_sdk_rs_fn_method_wallet_add_credential(self.uniffiClonePointer(),
        FfiConverterTypeCredential.lower(credential),$0
    )
}
}
    
    /**
     * Handle an OID4VP authorization request provided as a URL.
     *
     * This method will validate and process the request, returning a
     * redirect URL with the encoded verifiable presentation token,
     * if the presentation exchange was successful.
     *
     * If the request is invalid or cannot be processed, an error will be returned.
     *
     * # Arguments
     *
     * * `url` - The URL containing the OID4VP authorization request.
     *
     * # Returns
     *
     * An optional URL containing the OID4VP response.
     *
     * # Errors
     *
     * * If the request is invalid;
     * * If the response mode is not supported;
     * * If the response submission fails.

     */
open func handleOid4vpRequest(url: Url, callback: CredentialCallbackInterface)async throws  -> Url? {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_mobile_sdk_rs_fn_method_wallet_handle_oid4vp_request(
                    self.uniffiClonePointer(),
                    FfiConverterTypeUrl.lower(url),FfiConverterCallbackInterfaceCredentialCallbackInterface.lower(callback)
                )
            },
            pollFunc: ffi_mobile_sdk_rs_rust_future_poll_rust_buffer,
            completeFunc: ffi_mobile_sdk_rs_rust_future_complete_rust_buffer,
            freeFunc: ffi_mobile_sdk_rs_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeUrl.lift,
            errorHandler: FfiConverterTypeWalletError.lift
        )
}
    

}

public struct FfiConverterTypeWallet: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Wallet

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
        return Wallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Wallet) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Wallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Wallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
    return try FfiConverterTypeWallet.lift(pointer)
}

public func FfiConverterTypeWallet_lower(_ value: Wallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWallet.lower(value)
}


public struct ItemsRequest {
    public var docType: String
    public var namespaces: [String: [String: Bool]]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(docType: String, namespaces: [String: [String: Bool]]) {
        self.docType = docType
        self.namespaces = namespaces
    }
}



extension ItemsRequest: Equatable, Hashable {
    public static func ==(lhs: ItemsRequest, rhs: ItemsRequest) -> Bool {
        if lhs.docType != rhs.docType {
            return false
        }
        if lhs.namespaces != rhs.namespaces {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(docType)
        hasher.combine(namespaces)
    }
}


public struct FfiConverterTypeItemsRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ItemsRequest {
        return
            try ItemsRequest(
                docType: FfiConverterString.read(from: &buf), 
                namespaces: FfiConverterDictionaryStringDictionaryStringBool.read(from: &buf)
        )
    }

    public static func write(_ value: ItemsRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.docType, into: &buf)
        FfiConverterDictionaryStringDictionaryStringBool.write(value.namespaces, into: &buf)
    }
}


public func FfiConverterTypeItemsRequest_lift(_ buf: RustBuffer) throws -> ItemsRequest {
    return try FfiConverterTypeItemsRequest.lift(buf)
}

public func FfiConverterTypeItemsRequest_lower(_ value: ItemsRequest) -> RustBuffer {
    return FfiConverterTypeItemsRequest.lower(value)
}


public struct RequestData {
    public var sessionManager: SessionManager
    public var itemsRequests: [ItemsRequest]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(sessionManager: SessionManager, itemsRequests: [ItemsRequest]) {
        self.sessionManager = sessionManager
        self.itemsRequests = itemsRequests
    }
}



public struct FfiConverterTypeRequestData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RequestData {
        return
            try RequestData(
                sessionManager: FfiConverterTypeSessionManager.read(from: &buf), 
                itemsRequests: FfiConverterSequenceTypeItemsRequest.read(from: &buf)
        )
    }

    public static func write(_ value: RequestData, into buf: inout [UInt8]) {
        FfiConverterTypeSessionManager.write(value.sessionManager, into: &buf)
        FfiConverterSequenceTypeItemsRequest.write(value.itemsRequests, into: &buf)
    }
}


public func FfiConverterTypeRequestData_lift(_ buf: RustBuffer) throws -> RequestData {
    return try FfiConverterTypeRequestData.lift(buf)
}

public func FfiConverterTypeRequestData_lower(_ value: RequestData) -> RustBuffer {
    return FfiConverterTypeRequestData.lower(value)
}


public struct SessionData {
    public var state: SessionManagerEngaged
    public var qrCodeUri: String
    public var bleIdent: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(state: SessionManagerEngaged, qrCodeUri: String, bleIdent: String) {
        self.state = state
        self.qrCodeUri = qrCodeUri
        self.bleIdent = bleIdent
    }
}



public struct FfiConverterTypeSessionData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionData {
        return
            try SessionData(
                state: FfiConverterTypeSessionManagerEngaged.read(from: &buf), 
                qrCodeUri: FfiConverterString.read(from: &buf), 
                bleIdent: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: SessionData, into buf: inout [UInt8]) {
        FfiConverterTypeSessionManagerEngaged.write(value.state, into: &buf)
        FfiConverterString.write(value.qrCodeUri, into: &buf)
        FfiConverterString.write(value.bleIdent, into: &buf)
    }
}


public func FfiConverterTypeSessionData_lift(_ buf: RustBuffer) throws -> SessionData {
    return try FfiConverterTypeSessionData.lift(buf)
}

public func FfiConverterTypeSessionData_lower(_ value: SessionData) -> RustBuffer {
    return FfiConverterTypeSessionData.lower(value)
}


public enum CredentialCallbackError {

    
    
    case PermissionDenied
}


public struct FfiConverterTypeCredentialCallbackError: FfiConverterRustBuffer {
    typealias SwiftType = CredentialCallbackError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialCallbackError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .PermissionDenied

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CredentialCallbackError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .PermissionDenied:
            writeInt(&buf, Int32(1))
        
        }
    }
}


extension CredentialCallbackError: Equatable, Hashable {}

extension CredentialCallbackError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum KeyManagerError {

    
    
    case UnexpectedUniFfiCallbackError(String
    )
    case FailedToGenerateKey
    case FailedToEncrypt
    case FailedToDecrypt
    case FailedToSign
    case FailedToVerify
    case FailedToReset
    case KeyNotFound
    case KeyAlreadyExists
    case KeyInvalid
}


public struct FfiConverterTypeKeyManagerError: FfiConverterRustBuffer {
    typealias SwiftType = KeyManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .UnexpectedUniFfiCallbackError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .FailedToGenerateKey
        case 3: return .FailedToEncrypt
        case 4: return .FailedToDecrypt
        case 5: return .FailedToSign
        case 6: return .FailedToVerify
        case 7: return .FailedToReset
        case 8: return .KeyNotFound
        case 9: return .KeyAlreadyExists
        case 10: return .KeyInvalid

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeyManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .UnexpectedUniFfiCallbackError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .FailedToGenerateKey:
            writeInt(&buf, Int32(2))
        
        
        case .FailedToEncrypt:
            writeInt(&buf, Int32(3))
        
        
        case .FailedToDecrypt:
            writeInt(&buf, Int32(4))
        
        
        case .FailedToSign:
            writeInt(&buf, Int32(5))
        
        
        case .FailedToVerify:
            writeInt(&buf, Int32(6))
        
        
        case .FailedToReset:
            writeInt(&buf, Int32(7))
        
        
        case .KeyNotFound:
            writeInt(&buf, Int32(8))
        
        
        case .KeyAlreadyExists:
            writeInt(&buf, Int32(9))
        
        
        case .KeyInvalid:
            writeInt(&buf, Int32(10))
        
        }
    }
}


extension KeyManagerError: Equatable, Hashable {}

extension KeyManagerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum KeyTransformationError {

    
    
    case ToPkcs8(value: String
    )
    case FromPkcs8(value: String
    )
    case FromSec1(value: String
    )
    case ToSec1(value: String
    )
}


public struct FfiConverterTypeKeyTransformationError: FfiConverterRustBuffer {
    typealias SwiftType = KeyTransformationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyTransformationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .ToPkcs8(
            value: try FfiConverterString.read(from: &buf)
            )
        case 2: return .FromPkcs8(
            value: try FfiConverterString.read(from: &buf)
            )
        case 3: return .FromSec1(
            value: try FfiConverterString.read(from: &buf)
            )
        case 4: return .ToSec1(
            value: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeyTransformationError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .ToPkcs8(value):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(value, into: &buf)
            
        
        case let .FromPkcs8(value):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(value, into: &buf)
            
        
        case let .FromSec1(value):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(value, into: &buf)
            
        
        case let .ToSec1(value):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(value, into: &buf)
            
        }
    }
}


extension KeyTransformationError: Equatable, Hashable {}

extension KeyTransformationError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum MDocInitError {

    
    
    case Generic(value: String
    )
}


public struct FfiConverterTypeMDocInitError: FfiConverterRustBuffer {
    typealias SwiftType = MDocInitError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MDocInitError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            value: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MDocInitError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(value):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(value, into: &buf)
            
        }
    }
}


extension MDocInitError: Equatable, Hashable {}

extension MDocInitError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum MetadataManagerError {

    
    
    case UnexpectedUniFfiCallbackError(String
    )
    case Storage(StorageManagerError
    )
    case SerializationError(String
    )
    case NoMetadataFound
    case RequestObjectSigningAlgorithm(String
    )
}


public struct FfiConverterTypeMetadataManagerError: FfiConverterRustBuffer {
    typealias SwiftType = MetadataManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MetadataManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .UnexpectedUniFfiCallbackError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Storage(
            try FfiConverterTypeStorageManagerError.read(from: &buf)
            )
        case 3: return .SerializationError(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .NoMetadataFound
        case 5: return .RequestObjectSigningAlgorithm(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MetadataManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .UnexpectedUniFfiCallbackError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Storage(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeStorageManagerError.write(v1, into: &buf)
            
        
        case let .SerializationError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .NoMetadataFound:
            writeInt(&buf, Int32(4))
        
        
        case let .RequestObjectSigningAlgorithm(v1):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


extension MetadataManagerError: Equatable, Hashable {}

extension MetadataManagerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


/**
 * The [OID4VPError] enum represents the errors that can occur
 * when using the oid4vp foreign library.
 */
public enum Oid4vpError {

    
    
    case UnexpectedUniFfiCallbackError(String
    )
}


public struct FfiConverterTypeOID4VPError: FfiConverterRustBuffer {
    typealias SwiftType = Oid4vpError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Oid4vpError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .UnexpectedUniFfiCallbackError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Oid4vpError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .UnexpectedUniFfiCallbackError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


extension Oid4vpError: Equatable, Hashable {}

extension Oid4vpError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum RequestError {

    
    
    case Generic(value: String
    )
}


public struct FfiConverterTypeRequestError: FfiConverterRustBuffer {
    typealias SwiftType = RequestError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RequestError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            value: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RequestError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(value):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(value, into: &buf)
            
        }
    }
}


extension RequestError: Equatable, Hashable {}

extension RequestError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum ResponseError {

    
    
    case MissingSignature
    case Generic(value: String
    )
}


public struct FfiConverterTypeResponseError: FfiConverterRustBuffer {
    typealias SwiftType = ResponseError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ResponseError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .MissingSignature
        case 2: return .Generic(
            value: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ResponseError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .MissingSignature:
            writeInt(&buf, Int32(1))
        
        
        case let .Generic(value):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(value, into: &buf)
            
        }
    }
}


extension ResponseError: Equatable, Hashable {}

extension ResponseError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum SessionError {

    
    
    case Generic(value: String
    )
}


public struct FfiConverterTypeSessionError: FfiConverterRustBuffer {
    typealias SwiftType = SessionError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            value: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SessionError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(value):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(value, into: &buf)
            
        }
    }
}


extension SessionError: Equatable, Hashable {}

extension SessionError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum SignatureError {

    
    
    case InvalidSignature(value: String
    )
    case TooManyDocuments
    case Generic(value: String
    )
}


public struct FfiConverterTypeSignatureError: FfiConverterRustBuffer {
    typealias SwiftType = SignatureError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignatureError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidSignature(
            value: try FfiConverterString.read(from: &buf)
            )
        case 2: return .TooManyDocuments
        case 3: return .Generic(
            value: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignatureError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidSignature(value):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(value, into: &buf)
            
        
        case .TooManyDocuments:
            writeInt(&buf, Int32(2))
        
        
        case let .Generic(value):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(value, into: &buf)
            
        }
    }
}


extension SignatureError: Equatable, Hashable {}

extension SignatureError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


/**
 * Enum: StorageManagerError
 *
 * Represents errors that may occur during storage management operations
 */
public enum StorageManagerError {

    
    
    /**
     * This error happens when the key value could not be used with the underlying
     * storage system on the device
     */
    case InvalidLookupKey
    /**
     * This error occurrs when we can retrieve a value, but could not decrypt it
     */
    case CouldNotDecryptValue
    /**
     * The underlying device has no more storage available
     */
    case StorageFull
    /**
     * During storage manager initialization, it must create a new encryption key.  This
     * error is raised when that key could not be created.
     */
    case CouldNotMakeKey
    /**
     * An internal problem occurred in the storage manager.
     */
    case InternalError
}


public struct FfiConverterTypeStorageManagerError: FfiConverterRustBuffer {
    typealias SwiftType = StorageManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StorageManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidLookupKey
        case 2: return .CouldNotDecryptValue
        case 3: return .StorageFull
        case 4: return .CouldNotMakeKey
        case 5: return .InternalError

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: StorageManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidLookupKey:
            writeInt(&buf, Int32(1))
        
        
        case .CouldNotDecryptValue:
            writeInt(&buf, Int32(2))
        
        
        case .StorageFull:
            writeInt(&buf, Int32(3))
        
        
        case .CouldNotMakeKey:
            writeInt(&buf, Int32(4))
        
        
        case .InternalError:
            writeInt(&buf, Int32(5))
        
        }
    }
}


extension StorageManagerError: Equatable, Hashable {}

extension StorageManagerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum TerminationError {

    
    
    case Generic(value: String
    )
}


public struct FfiConverterTypeTerminationError: FfiConverterRustBuffer {
    typealias SwiftType = TerminationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TerminationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            value: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TerminationError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(value):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(value, into: &buf)
            
        }
    }
}


extension TerminationError: Equatable, Hashable {}

extension TerminationError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum TrustManagerError {

    
    
    case UnexpectedUniFfiCallbackError(String
    )
    case Storage(StorageManagerError
    )
    case DidBlocked(String
    )
}


public struct FfiConverterTypeTrustManagerError: FfiConverterRustBuffer {
    typealias SwiftType = TrustManagerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrustManagerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .UnexpectedUniFfiCallbackError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Storage(
            try FfiConverterTypeStorageManagerError.read(from: &buf)
            )
        case 3: return .DidBlocked(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TrustManagerError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .UnexpectedUniFfiCallbackError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Storage(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeStorageManagerError.write(v1, into: &buf)
            
        
        case let .DidBlocked(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


extension TrustManagerError: Equatable, Hashable {}

extension TrustManagerError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum VcbVerificationError {

    
    
    case Generic(value: String
    )
    case Verification
}


public struct FfiConverterTypeVCBVerificationError: FfiConverterRustBuffer {
    typealias SwiftType = VcbVerificationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VcbVerificationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            value: try FfiConverterString.read(from: &buf)
            )
        case 2: return .Verification

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VcbVerificationError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(value):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(value, into: &buf)
            
        
        case .Verification:
            writeInt(&buf, Int32(2))
        
        }
    }
}


extension VcbVerificationError: Equatable, Hashable {}

extension VcbVerificationError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum VcVerificationError {

    
    
    case Generic(value: String
    )
}


public struct FfiConverterTypeVCVerificationError: FfiConverterRustBuffer {
    typealias SwiftType = VcVerificationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VcVerificationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            value: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VcVerificationError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(value):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(value, into: &buf)
            
        }
    }
}


extension VcVerificationError: Equatable, Hashable {}

extension VcVerificationError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum VpError {

    
    
    case Verification
    case Signing
    case Parsing(value: String
    )
    case Generic(value: String
    )
}


public struct FfiConverterTypeVPError: FfiConverterRustBuffer {
    typealias SwiftType = VpError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VpError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Verification
        case 2: return .Signing
        case 3: return .Parsing(
            value: try FfiConverterString.read(from: &buf)
            )
        case 4: return .Generic(
            value: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VpError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .Verification:
            writeInt(&buf, Int32(1))
        
        
        case .Signing:
            writeInt(&buf, Int32(2))
        
        
        case let .Parsing(value):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(value, into: &buf)
            
        
        case let .Generic(value):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(value, into: &buf)
            
        }
    }
}


extension VpError: Equatable, Hashable {}

extension VpError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


public enum VdcCollectionError {

    
    
    /**
     * An unexpected error occurred.
     */
    case UnexpectedUniFfiCallbackError(String
    )
    /**
     * Attempt to convert the credential to a serialized form suitable for writing to storage failed.
     */
    case SerializeFailed
    /**
     * Attempting to convert the credential to a deserialized form suitable for runtime use failed.
     */
    case DeserializeFailed
    /**
     * Attempting to write the credential to storage failed.
     */
    case StoreFailed(StorageManagerError
    )
    /**
     * Attempting to read the credential from storage failed.
     */
    case LoadFailed(StorageManagerError
    )
    /**
     * Attempting to delete a credential from storage failed.
     */
    case DeleteFailed(StorageManagerError
    )
}


public struct FfiConverterTypeVdcCollectionError: FfiConverterRustBuffer {
    typealias SwiftType = VdcCollectionError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VdcCollectionError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .UnexpectedUniFfiCallbackError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .SerializeFailed
        case 3: return .DeserializeFailed
        case 4: return .StoreFailed(
            try FfiConverterTypeStorageManagerError.read(from: &buf)
            )
        case 5: return .LoadFailed(
            try FfiConverterTypeStorageManagerError.read(from: &buf)
            )
        case 6: return .DeleteFailed(
            try FfiConverterTypeStorageManagerError.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VdcCollectionError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .UnexpectedUniFfiCallbackError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .SerializeFailed:
            writeInt(&buf, Int32(2))
        
        
        case .DeserializeFailed:
            writeInt(&buf, Int32(3))
        
        
        case let .StoreFailed(v1):
            writeInt(&buf, Int32(4))
            FfiConverterTypeStorageManagerError.write(v1, into: &buf)
            
        
        case let .LoadFailed(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeStorageManagerError.write(v1, into: &buf)
            
        
        case let .DeleteFailed(v1):
            writeInt(&buf, Int32(6))
            FfiConverterTypeStorageManagerError.write(v1, into: &buf)
            
        }
    }
}


extension VdcCollectionError: Equatable, Hashable {}

extension VdcCollectionError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


/**
 * The [WalletError] enum represents the errors that can occur
 * when working with the [Wallet] between foreign function interfaces.
 */
public enum WalletError {

    
    
    case UnexpectedUniFfiCallbackError(String
    )
    case HttpClientInitialization(String
    )
    case Oid4vpRequestValidation(String
    )
    case Oid4vpPresentationDefinitionResolution(String
    )
    case Storage(StorageManagerError
    )
    case VdcCollection(VdcCollectionError
    )
    case KeyManager(KeyManagerError
    )
    case RequiredCredentialNotFound(String
    )
    case KeyNotFound(UInt8
    )
    case Deserialization(String
    )
    case SerdeJson(String
    )
    case Oid4vpResponseSubmission(String
    )
    case PresentationSubmissionCreation(String
    )
    case VerifiablePresentation(String
    )
    case GenerateJwt(String
    )
    case ActiveKeyIndexReadWriteError(String
    )
    case JwkParseError(String
    )
    case DidKeyGenerateUrl(String
    )
    case InvalidDidUrl(String
    )
    case Oid4vpUnsupportedResponseMode(String
    )
    case SigningAlgorithmNotFound(String
    )
    case SigningError(String
    )
    case InvalidCredentialReference
    case CredentialCallback(CredentialCallbackError
    )
    case Unknown
}


public struct FfiConverterTypeWalletError: FfiConverterRustBuffer {
    typealias SwiftType = WalletError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .UnexpectedUniFfiCallbackError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .HttpClientInitialization(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .Oid4vpRequestValidation(
            try FfiConverterString.read(from: &buf)
            )
        case 4: return .Oid4vpPresentationDefinitionResolution(
            try FfiConverterString.read(from: &buf)
            )
        case 5: return .Storage(
            try FfiConverterTypeStorageManagerError.read(from: &buf)
            )
        case 6: return .VdcCollection(
            try FfiConverterTypeVdcCollectionError.read(from: &buf)
            )
        case 7: return .KeyManager(
            try FfiConverterTypeKeyManagerError.read(from: &buf)
            )
        case 8: return .RequiredCredentialNotFound(
            try FfiConverterString.read(from: &buf)
            )
        case 9: return .KeyNotFound(
            try FfiConverterUInt8.read(from: &buf)
            )
        case 10: return .Deserialization(
            try FfiConverterString.read(from: &buf)
            )
        case 11: return .SerdeJson(
            try FfiConverterString.read(from: &buf)
            )
        case 12: return .Oid4vpResponseSubmission(
            try FfiConverterString.read(from: &buf)
            )
        case 13: return .PresentationSubmissionCreation(
            try FfiConverterString.read(from: &buf)
            )
        case 14: return .VerifiablePresentation(
            try FfiConverterString.read(from: &buf)
            )
        case 15: return .GenerateJwt(
            try FfiConverterString.read(from: &buf)
            )
        case 16: return .ActiveKeyIndexReadWriteError(
            try FfiConverterString.read(from: &buf)
            )
        case 17: return .JwkParseError(
            try FfiConverterString.read(from: &buf)
            )
        case 18: return .DidKeyGenerateUrl(
            try FfiConverterString.read(from: &buf)
            )
        case 19: return .InvalidDidUrl(
            try FfiConverterString.read(from: &buf)
            )
        case 20: return .Oid4vpUnsupportedResponseMode(
            try FfiConverterString.read(from: &buf)
            )
        case 21: return .SigningAlgorithmNotFound(
            try FfiConverterString.read(from: &buf)
            )
        case 22: return .SigningError(
            try FfiConverterString.read(from: &buf)
            )
        case 23: return .InvalidCredentialReference
        case 24: return .CredentialCallback(
            try FfiConverterTypeCredentialCallbackError.read(from: &buf)
            )
        case 25: return .Unknown

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .UnexpectedUniFfiCallbackError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .HttpClientInitialization(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Oid4vpRequestValidation(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Oid4vpPresentationDefinitionResolution(v1):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Storage(v1):
            writeInt(&buf, Int32(5))
            FfiConverterTypeStorageManagerError.write(v1, into: &buf)
            
        
        case let .VdcCollection(v1):
            writeInt(&buf, Int32(6))
            FfiConverterTypeVdcCollectionError.write(v1, into: &buf)
            
        
        case let .KeyManager(v1):
            writeInt(&buf, Int32(7))
            FfiConverterTypeKeyManagerError.write(v1, into: &buf)
            
        
        case let .RequiredCredentialNotFound(v1):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .KeyNotFound(v1):
            writeInt(&buf, Int32(9))
            FfiConverterUInt8.write(v1, into: &buf)
            
        
        case let .Deserialization(v1):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .SerdeJson(v1):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Oid4vpResponseSubmission(v1):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .PresentationSubmissionCreation(v1):
            writeInt(&buf, Int32(13))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .VerifiablePresentation(v1):
            writeInt(&buf, Int32(14))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .GenerateJwt(v1):
            writeInt(&buf, Int32(15))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ActiveKeyIndexReadWriteError(v1):
            writeInt(&buf, Int32(16))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .JwkParseError(v1):
            writeInt(&buf, Int32(17))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .DidKeyGenerateUrl(v1):
            writeInt(&buf, Int32(18))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .InvalidDidUrl(v1):
            writeInt(&buf, Int32(19))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Oid4vpUnsupportedResponseMode(v1):
            writeInt(&buf, Int32(20))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .SigningAlgorithmNotFound(v1):
            writeInt(&buf, Int32(21))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .SigningError(v1):
            writeInt(&buf, Int32(22))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .InvalidCredentialReference:
            writeInt(&buf, Int32(23))
        
        
        case let .CredentialCallback(v1):
            writeInt(&buf, Int32(24))
            FfiConverterTypeCredentialCallbackError.write(v1, into: &buf)
            
        
        case .Unknown:
            writeInt(&buf, Int32(25))
        
        }
    }
}


extension WalletError: Equatable, Hashable {}

extension WalletError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




/**
 * This is a callback interface for credential operations, defined by the native code.
 *
 * For example, this is used to provide methods for the client to select a credential to present,
 * retrieved from the wallet.
 */
public protocol CredentialCallbackInterface : AnyObject {
    
    /**
     * Permit the verifier to request the information defined in the presentation definition.
     *
     * This method is called during the presentation request, passing the required fields
     * from the presentation definition. The verifier should return a boolean indicating whether
     * the verifier can present the requested information.
     *
     * The native client should implement this method, returning a vector of booleans indicating
     * whether the requested information can be presented.
     *
     * the format of the requested_information is a vector of strings, each string is a field name
     * that the verifier is requesting, e.g. ["Name", "Date Of Birth", "Address"]
     *
     * If the user denies the a field request, the verifier should return a [CredentialCallbackError::PermissionDenied]
     */
    func permitPresentation(requestedFields: [String]) throws 
    
    /**
     * Select which credentials to present provided a list of matching credentials.
     *
     * This is called by the client to select which credentials to present to the verifier. Multiple credentials
     * may satisfy the request, and the client should select the most appropriate credentials to present.
     */
    func selectCredentials(credentials: [Credential])  -> [Credential]
    
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceCredentialCallbackInterface {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceCredentialCallbackInterface = UniffiVTableCallbackInterfaceCredentialCallbackInterface(
        permitPresentation: { (
            uniffiHandle: UInt64,
            requestedFields: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceCredentialCallbackInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.permitPresentation(
                     requestedFields: try FfiConverterSequenceString.lift(requestedFields)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeCredentialCallbackError.lower
            )
        },
        selectCredentials: { (
            uniffiHandle: UInt64,
            credentials: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [Credential] in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceCredentialCallbackInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.selectCredentials(
                     credentials: try FfiConverterSequenceTypeCredential.lift(credentials)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceTypeCredential.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceCredentialCallbackInterface.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface CredentialCallbackInterface: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitCredentialCallbackInterface() {
    uniffi_mobile_sdk_rs_fn_init_callback_vtable_credentialcallbackinterface(&UniffiCallbackInterfaceCredentialCallbackInterface.vtable)
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceCredentialCallbackInterface {
    fileprivate static var handleMap = UniffiHandleMap<CredentialCallbackInterface>()
}

extension FfiConverterCallbackInterfaceCredentialCallbackInterface : FfiConverter {
    typealias SwiftType = CredentialCallbackInterface
    typealias FfiType = UInt64

    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}




/**
 * KeyManager for interacting with the device's
 * cryptographic device APIs for signing and encrypting
 * messages.
 */
public protocol KeyManagerInterface : AnyObject {
    
    /**
     * Reset the key manager, removing all keys.
     */
    func reset()  -> Bool
    
    /**
     * Check if a key exists in the key manager.
     */
    func keyExists(id: Key)  -> Bool
    
    /**
     * Generate a signing key in the key manager.
     */
    func generateSigningKey(id: Key) throws  -> Bool
    
    /**
     * Return a JWK for a given key ID as a JSON-encoded string.
     */
    func getJwk(id: Key) throws  -> String
    
    /**
     * Sign a payload with a key in the key manager.
     */
    func signPayload(id: Key, payload: Data) throws  -> Data
    
    /**
     * Generate an encryption key in the key manager.
     */
    func generateEncryptionKey(id: Key) throws  -> Bool
    
    func encryptPayload(id: Key, payload: Data) throws  -> EncryptedPayload
    
    /**
     * Decrypt a ciphertext with a key in the key manager. Returns a
     * plaintext payload, if the ID exists and the decryption is successful.
     */
    func decryptPayload(id: Key, encryptedPayload: EncryptedPayload) throws  -> Data
    
}



// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceKeyManagerInterface {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceKeyManagerInterface = UniffiVTableCallbackInterfaceKeyManagerInterface(
        reset: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<Int8>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Bool in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceKeyManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.reset(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterBool.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        keyExists: { (
            uniffiHandle: UInt64,
            id: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<Int8>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Bool in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceKeyManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.keyExists(
                     id: try FfiConverterTypeKey.lift(id)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterBool.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        generateSigningKey: { (
            uniffiHandle: UInt64,
            id: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<Int8>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Bool in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceKeyManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.generateSigningKey(
                     id: try FfiConverterTypeKey.lift(id)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterBool.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeKeyManagerError.lower
            )
        },
        getJwk: { (
            uniffiHandle: UInt64,
            id: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> String in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceKeyManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.getJwk(
                     id: try FfiConverterTypeKey.lift(id)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterString.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeKeyManagerError.lower
            )
        },
        signPayload: { (
            uniffiHandle: UInt64,
            id: RustBuffer,
            payload: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Data in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceKeyManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.signPayload(
                     id: try FfiConverterTypeKey.lift(id),
                     payload: try FfiConverterData.lift(payload)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterData.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeKeyManagerError.lower
            )
        },
        generateEncryptionKey: { (
            uniffiHandle: UInt64,
            id: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<Int8>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Bool in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceKeyManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.generateEncryptionKey(
                     id: try FfiConverterTypeKey.lift(id)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterBool.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeKeyManagerError.lower
            )
        },
        encryptPayload: { (
            uniffiHandle: UInt64,
            id: RustBuffer,
            payload: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<UnsafeMutableRawPointer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> EncryptedPayload in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceKeyManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.encryptPayload(
                     id: try FfiConverterTypeKey.lift(id),
                     payload: try FfiConverterData.lift(payload)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeEncryptedPayload.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeKeyManagerError.lower
            )
        },
        decryptPayload: { (
            uniffiHandle: UInt64,
            id: RustBuffer,
            encryptedPayload: UnsafeMutableRawPointer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Data in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceKeyManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.decryptPayload(
                     id: try FfiConverterTypeKey.lift(id),
                     encryptedPayload: try FfiConverterTypeEncryptedPayload.lift(encryptedPayload)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterData.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeKeyManagerError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceKeyManagerInterface.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface KeyManagerInterface: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitKeyManagerInterface() {
    uniffi_mobile_sdk_rs_fn_init_callback_vtable_keymanagerinterface(&UniffiCallbackInterfaceKeyManagerInterface.vtable)
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceKeyManagerInterface {
    fileprivate static var handleMap = UniffiHandleMap<KeyManagerInterface>()
}

extension FfiConverterCallbackInterfaceKeyManagerInterface : FfiConverter {
    typealias SwiftType = KeyManagerInterface
    typealias FfiType = UInt64

    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}




public protocol SecretKeyInterface : AnyObject {
    
}



// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceSecretKeyInterface {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceSecretKeyInterface = UniffiVTableCallbackInterfaceSecretKeyInterface(
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceSecretKeyInterface.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface SecretKeyInterface: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitSecretKeyInterface() {
    uniffi_mobile_sdk_rs_fn_init_callback_vtable_secretkeyinterface(&UniffiCallbackInterfaceSecretKeyInterface.vtable)
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceSecretKeyInterface {
    fileprivate static var handleMap = UniffiHandleMap<SecretKeyInterface>()
}

extension FfiConverterCallbackInterfaceSecretKeyInterface : FfiConverter {
    typealias SwiftType = SecretKeyInterface
    typealias FfiType = UInt64

    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}




/**
 * Interface: StorageManagerInterface
 *
 * The StorageManagerInterface provides access to functions defined in Kotlin and Swift for
 * managing persistent storage on the device.
 *
 * When dealing with UniFFI exported functions and objects, this will need to be Boxed as:
 * Box<dyn StorageManagerInterface>
 *
 * We use the older callback_interface to keep the required version level of our Android API
 * low.
 */
public protocol StorageManagerInterface : AnyObject {
    
    /**
     * Function: add
     *
     * Adds a key-value pair to storage.  Should the key already exist, the value will be
     * replaced
     *
     * Arguments:
     * key - The key to add
     * value - The value to add under the key.
     */
    func add(key: Key, value: Value) throws 
    
    /**
     * Function: get
     *
     * Callback function pointer to native (kotlin/swift) code for
     * getting a key.
     */
    func get(key: Key) throws  -> Value?
    
    /**
     * Function: list
     *
     * Callback function pointer for listing available keys.
     */
    func list() throws  -> [Key]
    
    /**
     * Function: remove
     *
     * Callback function pointer to native (kotlin/swift) code for
     * removing a key.  This referenced function MUST be idempotent.  In
     * particular, it must treat removing a non-existent key as a normal and
     * expected circumstance, simply returning () and not an error.
     */
    func remove(key: Key) throws 
    
}



// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceStorageManagerInterface {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceStorageManagerInterface = UniffiVTableCallbackInterfaceStorageManagerInterface(
        add: { (
            uniffiHandle: UInt64,
            key: RustBuffer,
            value: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceStorageManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.add(
                     key: try FfiConverterTypeKey.lift(key),
                     value: try FfiConverterTypeValue.lift(value)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageManagerError.lower
            )
        },
        get: { (
            uniffiHandle: UInt64,
            key: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Value? in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceStorageManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.get(
                     key: try FfiConverterTypeKey.lift(key)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterOptionTypeValue.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageManagerError.lower
            )
        },
        list: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [Key] in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceStorageManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.list(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceTypeKey.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageManagerError.lower
            )
        },
        remove: { (
            uniffiHandle: UInt64,
            key: RustBuffer,
            uniffiOutReturn: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> () in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceStorageManagerInterface.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.remove(
                     key: try FfiConverterTypeKey.lift(key)
                )
            }

            
            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeStorageManagerError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceStorageManagerInterface.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface StorageManagerInterface: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitStorageManagerInterface() {
    uniffi_mobile_sdk_rs_fn_init_callback_vtable_storagemanagerinterface(&UniffiCallbackInterfaceStorageManagerInterface.vtable)
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceStorageManagerInterface {
    fileprivate static var handleMap = UniffiHandleMap<StorageManagerInterface>()
}

extension FfiConverterCallbackInterfaceStorageManagerInterface : FfiConverter {
    typealias SwiftType = StorageManagerInterface
    typealias FfiType = UInt64

    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

fileprivate struct FfiConverterOptionTypeUrl: FfiConverterRustBuffer {
    typealias SwiftType = Url?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeUrl.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeUrl.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeValue: FfiConverterRustBuffer {
    typealias SwiftType = Value?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeValue.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeValue.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeCredential: FfiConverterRustBuffer {
    typealias SwiftType = [Credential]

    public static func write(_ value: [Credential], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCredential.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Credential] {
        let len: Int32 = try readInt(&buf)
        var seq = [Credential]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeCredential.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeItemsRequest: FfiConverterRustBuffer {
    typealias SwiftType = [ItemsRequest]

    public static func write(_ value: [ItemsRequest], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeItemsRequest.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ItemsRequest] {
        let len: Int32 = try readInt(&buf)
        var seq = [ItemsRequest]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeItemsRequest.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeKey: FfiConverterRustBuffer {
    typealias SwiftType = [Key]

    public static func write(_ value: [Key], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Key] {
        let len: Int32 = try readInt(&buf)
        var seq = [Key]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeKey.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringBool: FfiConverterRustBuffer {
    public static func write(_ value: [String: Bool], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterBool.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Bool] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Bool]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterBool.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

fileprivate struct FfiConverterDictionaryStringSequenceString: FfiConverterRustBuffer {
    public static func write(_ value: [String: [String]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterSequenceString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: [String]] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: [String]]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterSequenceString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

fileprivate struct FfiConverterDictionaryStringDictionaryStringBool: FfiConverterRustBuffer {
    public static func write(_ value: [String: [String: Bool]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterDictionaryStringBool.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: [String: Bool]] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: [String: Bool]]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterDictionaryStringBool.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

fileprivate struct FfiConverterDictionaryStringDictionaryStringSequenceString: FfiConverterRustBuffer {
    public static func write(_ value: [String: [String: [String]]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterDictionaryStringSequenceString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: [String: [String]]] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: [String: [String]]]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterDictionaryStringSequenceString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ClaimFormatDesignation = String
public struct FfiConverterTypeClaimFormatDesignation: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClaimFormatDesignation {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: ClaimFormatDesignation, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ClaimFormatDesignation {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: ClaimFormatDesignation) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeClaimFormatDesignation_lift(_ value: RustBuffer) throws -> ClaimFormatDesignation {
    return try FfiConverterTypeClaimFormatDesignation.lift(value)
}

public func FfiConverterTypeClaimFormatDesignation_lower(_ value: ClaimFormatDesignation) -> RustBuffer {
    return FfiConverterTypeClaimFormatDesignation.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias CredentialType = String
public struct FfiConverterTypeCredentialType: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CredentialType {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: CredentialType, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> CredentialType {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: CredentialType) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeCredentialType_lift(_ value: RustBuffer) throws -> CredentialType {
    return try FfiConverterTypeCredentialType.lift(value)
}

public func FfiConverterTypeCredentialType_lower(_ value: CredentialType) -> RustBuffer {
    return FfiConverterTypeCredentialType.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Key = String
public struct FfiConverterTypeKey: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Key {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Key, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Key {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Key) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeKey_lift(_ value: RustBuffer) throws -> Key {
    return try FfiConverterTypeKey.lift(value)
}

public func FfiConverterTypeKey_lower(_ value: Key) -> RustBuffer {
    return FfiConverterTypeKey.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Url = String
public struct FfiConverterTypeUrl: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Url {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Url, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Url {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Url) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeUrl_lift(_ value: RustBuffer) throws -> Url {
    return try FfiConverterTypeUrl.lift(value)
}

public func FfiConverterTypeUrl_lower(_ value: Url) -> RustBuffer {
    return FfiConverterTypeUrl.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Uuid = String
public struct FfiConverterTypeUuid: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Uuid {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: Uuid, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Uuid {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: Uuid) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


public func FfiConverterTypeUuid_lift(_ value: RustBuffer) throws -> Uuid {
    return try FfiConverterTypeUuid.lift(value)
}

public func FfiConverterTypeUuid_lower(_ value: Uuid) -> RustBuffer {
    return FfiConverterTypeUuid.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Value = Data
public struct FfiConverterTypeValue: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Value {
        return try FfiConverterData.read(from: &buf)
    }

    public static func write(_ value: Value, into buf: inout [UInt8]) {
        return FfiConverterData.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Value {
        return try FfiConverterData.lift(value)
    }

    public static func lower(_ value: Value) -> RustBuffer {
        return FfiConverterData.lower(value)
    }
}


public func FfiConverterTypeValue_lift(_ value: RustBuffer) throws -> Value {
    return try FfiConverterTypeValue.lift(value)
}

public func FfiConverterTypeValue_lower(_ value: Value) -> RustBuffer {
    return FfiConverterTypeValue.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
public func handleRequest(state: SessionManagerEngaged, request: Data)throws  -> RequestData {
    return try  FfiConverterTypeRequestData.lift(try rustCallWithError(FfiConverterTypeRequestError.lift) {
    uniffi_mobile_sdk_rs_fn_func_handle_request(
        FfiConverterTypeSessionManagerEngaged.lower(state),
        FfiConverterData.lower(request),$0
    )
})
}
public func initialiseSession(document: MDoc, uuid: Uuid)throws  -> SessionData {
    return try  FfiConverterTypeSessionData.lift(try rustCallWithError(FfiConverterTypeSessionError.lift) {
    uniffi_mobile_sdk_rs_fn_func_initialise_session(
        FfiConverterTypeMDoc.lower(document),
        FfiConverterTypeUuid.lower(uuid),$0
    )
})
}
public func submitResponse(sessionManager: SessionManager, permittedItems: [String: [String: [String]]])throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeResponseError.lift) {
    uniffi_mobile_sdk_rs_fn_func_submit_response(
        FfiConverterTypeSessionManager.lower(sessionManager),
        FfiConverterDictionaryStringDictionaryStringSequenceString.lower(permittedItems),$0
    )
})
}
public func submitSignature(sessionManager: SessionManager, derSignature: Data)throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeSignatureError.lift) {
    uniffi_mobile_sdk_rs_fn_func_submit_signature(
        FfiConverterTypeSessionManager.lower(sessionManager),
        FfiConverterData.lower(derSignature),$0
    )
})
}
public func terminateSession()throws  -> Data {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeTerminationError.lift) {
    uniffi_mobile_sdk_rs_fn_func_terminate_session($0
    )
})
}
public func vcToSignedVp(vc: String, keyStr: String)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_mobile_sdk_rs_fn_func_vc_to_signed_vp(FfiConverterString.lower(vc),FfiConverterString.lower(keyStr)
                )
            },
            pollFunc: ffi_mobile_sdk_rs_rust_future_poll_rust_buffer,
            completeFunc: ffi_mobile_sdk_rs_rust_future_complete_rust_buffer,
            freeFunc: ffi_mobile_sdk_rs_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeVPError.lift
        )
}
public func verifyJsonVcString(json: String)async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_mobile_sdk_rs_fn_func_verify_json_vc_string(FfiConverterString.lower(json)
                )
            },
            pollFunc: ffi_mobile_sdk_rs_rust_future_poll_void,
            completeFunc: ffi_mobile_sdk_rs_rust_future_complete_void,
            freeFunc: ffi_mobile_sdk_rs_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeVCVerificationError.lift
        )
}
public func verifyJwtVp(jwtVp: String)async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_mobile_sdk_rs_fn_func_verify_jwt_vp(FfiConverterString.lower(jwtVp)
                )
            },
            pollFunc: ffi_mobile_sdk_rs_rust_future_poll_void,
            completeFunc: ffi_mobile_sdk_rs_rust_future_complete_void,
            freeFunc: ffi_mobile_sdk_rs_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeVPError.lift
        )
}
public func verifyPdf417Barcode(payload: String)async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_mobile_sdk_rs_fn_func_verify_pdf417_barcode(FfiConverterString.lower(payload)
                )
            },
            pollFunc: ffi_mobile_sdk_rs_rust_future_poll_void,
            completeFunc: ffi_mobile_sdk_rs_rust_future_complete_void,
            freeFunc: ffi_mobile_sdk_rs_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeVCBVerificationError.lift
        )
}
public func verifyVcbQrcodeAgainstMrz(mrzPayload: String, qrPayload: String)async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_mobile_sdk_rs_fn_func_verify_vcb_qrcode_against_mrz(FfiConverterString.lower(mrzPayload),FfiConverterString.lower(qrPayload)
                )
            },
            pollFunc: ffi_mobile_sdk_rs_rust_future_poll_void,
            completeFunc: ffi_mobile_sdk_rs_rust_future_complete_void,
            freeFunc: ffi_mobile_sdk_rs_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeVCBVerificationError.lift
        )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_mobile_sdk_rs_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_func_handle_request() != 26058) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_func_initialise_session() != 57560) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_func_submit_response() != 50547) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_func_submit_signature() != 17097) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_func_terminate_session() != 25700) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_func_vc_to_signed_vp() != 47312) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_func_verify_json_vc_string() != 13072) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_func_verify_jwt_vp() != 8825) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_func_verify_pdf417_barcode() != 14164) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_func_verify_vcb_qrcode_against_mrz() != 36527) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_credential_ctype() != 4657) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_credential_format() != 29822) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_credential_id() != 50552) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_credential_payload() != 24759) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_encryptedpayload_ciphertext() != 44237) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_encryptedpayload_iv() != 46304) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_mdoc_id() != 4321) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_wallet_add_credential() != 65391) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_wallet_handle_oid4vp_request() != 5698) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_constructor_credential_new() != 30947) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_constructor_credential_new_as_arc() != 51066) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_constructor_encryptedpayload_new() != 10622) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_constructor_mdoc_from_cbor() != 65194) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_constructor_wallet_new() != 56083) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_credentialcallbackinterface_permit_presentation() != 31447) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_credentialcallbackinterface_select_credentials() != 52508) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_keymanagerinterface_reset() != 18603) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_keymanagerinterface_key_exists() != 36618) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_keymanagerinterface_generate_signing_key() != 21875) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_keymanagerinterface_get_jwk() != 60485) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_keymanagerinterface_sign_payload() != 40265) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_keymanagerinterface_generate_encryption_key() != 918) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_keymanagerinterface_encrypt_payload() != 62994) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_keymanagerinterface_decrypt_payload() != 14477) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_storagemanagerinterface_add() != 60217) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_storagemanagerinterface_get() != 64957) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_storagemanagerinterface_list() != 22654) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_mobile_sdk_rs_checksum_method_storagemanagerinterface_remove() != 46691) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitCredentialCallbackInterface()
    uniffiCallbackInitKeyManagerInterface()
    uniffiCallbackInitSecretKeyInterface()
    uniffiCallbackInitStorageManagerInterface()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all